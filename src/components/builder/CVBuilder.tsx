import React, { useState, useEffect } from 'react';
import { SectionEditor } from './SectionEditor';
import { Preview } from './Preview';
import { GhostTextarea } from './GhostTextarea';
import { SkillDropdown } from '../ui/SkillDropdown';
import { Translator } from '../ui/Translator';
import { Header } from '../ui/Header';
import { Footer } from '../ui/Footer';
import { useCVStore } from '../../stores/cvStore';
import { useUIStore } from '../../stores/uiStore';
import { downloadCV } from '../../lib/download';
import { CV_TEMPLATES } from '../../types/cv';
import { LocationDetector } from '../ui/LocationDetector';

export function CVBuilder() {
  // Zustand Ïä§ÌÜ†Ïñ¥ÏóêÏÑú ÏÉÅÌÉúÏôÄ Ïï°ÏÖò Í∞ÄÏ†∏Ïò§Í∏∞
  const { cvData, updatePersonalInfo, addSkill, removeSkill, addLanguage, removeLanguage, resetAfterCompletion, setCVType } = useCVStore();
  const { isLoading, error } = useUIStore();
  
  // Î°úÏª¨ ÏÉÅÌÉú
  const [skillsInput, setSkillsInput] = useState('');
  const [languagesInput, setLanguagesInput] = useState('');
  const [downloadFormat, setDownloadFormat] = useState<'pdf' | 'markdown' | 'html'>('pdf');
  const [activeSection, setActiveSection] = useState<'personal' | 'skills' | 'languages' | 'experience' | 'education' | 'projects'>('personal');

  // Ïï± ÏãúÏûë Ïãú Ï†ÄÏû•Îêú ÏûÑÏãúÏ†ÄÏû• Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    const savedDraft = localStorage.getItem('cvDraft');
    if (savedDraft) {
      try {
        const draftData = JSON.parse(savedDraft);
        // Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î≥µÏõê Ïó¨Î∂Ä ÌôïÏù∏
        if (confirm('Ïù¥Ï†ÑÏóê ÏûÑÏãúÏ†ÄÏû•Îêú CV Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏäµÎãàÎã§. Î≥µÏõêÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
          // cvDataÎ•º draftDataÎ°ú Î≥µÏõêÌïòÎäî Ìï®ÏàòÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§
          // ÌòÑÏû¨Îäî Í∞ÑÎã®Ìûà alertÎ°ú ÌëúÏãú
          alert('ÏûÑÏãúÏ†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞Î•º Î≥µÏõêÌïòÎ†§Î©¥ Í∞úÎ∞úÏûêÍ∞Ä Íµ¨ÌòÑÌï¥Ïïº Ìï©ÎãàÎã§.');
        }
      } catch (error) {
        console.error('ÏûÑÏãúÏ†ÄÏû• Îç∞Ïù¥ÌÑ∞ ÌååÏã± Ïò§Î•ò:', error);
        localStorage.removeItem('cvDraft');
      }
    }
  }, []);

  const handleKeyPress = (e: React.KeyboardEvent, action: () => void) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      action();
    }
  };

  const handleAddSkill = () => {
    if (skillsInput.trim()) {
      addSkill(skillsInput.trim());
      setSkillsInput('');
    }
  };

  const handleAddLanguage = () => {
    if (languagesInput.trim()) {
      addLanguage(languagesInput.trim());
      setLanguagesInput('');
    }
  };

  // Ïä§ÌÇ¨ ÏÑ†ÌÉù Ï≤òÎ¶¨
  const handleSkillSelect = (skill: string) => {
    addSkill(skill);
  };

  // CV Îã§Ïö¥Î°úÎìú Ï≤òÎ¶¨
  const handleDownload = async () => {
    try {
      await downloadCV(cvData, downloadFormat, () => {
        // Îã§Ïö¥Î°úÎìú ÏôÑÎ£å ÌõÑ Ï¥àÍ∏∞Ìôî
        resetAfterCompletion();
        alert('CVÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§!\n\nÏÉàÎ°úÏö¥ CV ÏûëÏÑ±ÏùÑ ÏúÑÌï¥ Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');
      });
    } catch (error) {
      console.error('Îã§Ïö¥Î°úÎìú Ïã§Ìå®:', error);
      alert('Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
    }
  };

  // ÌïÑÏàò Ï†ïÎ≥¥ ÏûÖÎ†• ÏôÑÎ£å Ïó¨Î∂Ä ÌôïÏù∏
  const isDownloadReady = (): boolean => {
    const { personalInfo, skills, languages, experience, education, projects } = cvData;
    
    // Í∏∞Î≥∏ Ï†ïÎ≥¥ ÌïÑÏàò Ìï≠Î™© ÌôïÏù∏
    const hasBasicInfo = personalInfo.name && personalInfo.email && personalInfo.phone && personalInfo.location;
    
    // Ïä§ÌÇ¨Í≥º Ïñ∏Ïñ¥Îäî ÏµúÏÜå 1Í∞ú Ïù¥ÏÉÅ
    const hasSkills = skills.length > 0;
    const hasLanguages = languages.length > 0;
    
    // ÏµúÏÜå 1Í∞ú Ïù¥ÏÉÅÏùò Í≤ΩÌóò/ÍµêÏú°/ÌîÑÎ°úÏ†ùÌä∏
    const hasExperience = experience.length > 0;
    const hasEducation = education.length > 0;
    const hasProjects = projects.length > 0;
    
    return Boolean(hasBasicInfo && hasSkills && hasLanguages && (hasExperience || hasEducation || hasProjects));
  };

  // ÏßÑÌñâ ÏÉÅÌô© Í≥ÑÏÇ∞ (0-100%)
  const getProgressPercentage = () => {
    const totalSteps = 6; // Í∏∞Î≥∏Ï†ïÎ≥¥, Ïä§ÌÇ¨, Ïñ∏Ïñ¥, Í≤ΩÎ†•, ÍµêÏú°, ÌîÑÎ°úÏ†ùÌä∏
    let completedSteps = 0;
    
    const { personalInfo, skills, languages, experience, education, projects } = cvData;
    
    if (personalInfo.name && personalInfo.email && personalInfo.phone && personalInfo.location) completedSteps++;
    if (skills.length > 0) completedSteps++;
    if (languages.length > 0) completedSteps++;
    if (experience.length > 0) completedSteps++;
    if (education.length > 0) completedSteps++;
    if (projects.length > 0) completedSteps++;
    
    return Math.round((completedSteps / totalSteps) * 100);
  };

  // ÏßÑÌñâ ÏÉÅÌô© Îã®Í≥ÑÎ≥Ñ ÏÉÅÌÉú
  const getStepStatus = () => {
    const { personalInfo, skills, languages, experience, education, projects } = cvData;
    
    return {
      basicInfo: !!(personalInfo.name && personalInfo.email && personalInfo.phone && personalInfo.location),
      skills: skills.length > 0,
      languages: languages.length > 0,
      experience: experience.length > 0,
      education: education.length > 0,
      projects: projects.length > 0
    };
  };

  // ÏÑπÏÖò ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
  const sections = [
    { id: 'personal', label: 'Í∏∞Î≥∏Ï†ïÎ≥¥', icon: 'üë§' },
    { id: 'skills', label: 'Ïä§ÌÇ¨', icon: '‚ö°' },
    { id: 'languages', label: 'Ïñ∏Ïñ¥', icon: 'üåê' },
    { id: 'experience', label: 'Í≤ΩÎ†•', icon: 'üíº' },
    { id: 'education', label: 'ÍµêÏú°', icon: 'üéì' },
    { id: 'projects', label: 'ÌîÑÎ°úÏ†ùÌä∏', icon: 'üöÄ' }
  ];

  const renderSection = () => {
    switch (activeSection) {
      case 'personal':
        return (
          <div className="card">
            <div className="card-body">
              <h2 className="card-title">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                Í∞úÏù∏Ï†ïÎ≥¥
              </h2>
              <div className="input-grid input-grid-2">
                <div className="input-field">
                  <input
                    type="text"
                    placeholder="Ïù¥Î¶Ñ"
                    value={cvData.personalInfo.name}
                    onChange={(e) => updatePersonalInfo('name', e.target.value)}
                    className="form-input"
                  />
                </div>
                
                <div className="input-field">
                  <input
                    type="email"
                    placeholder="Ïù¥Î©îÏùº"
                    value={cvData.personalInfo.email}
                    onChange={(e) => updatePersonalInfo('email', e.target.value)}
                    className="form-input"
                  />
                </div>
                
                <div className="input-field">
                  <input
                    type="tel"
                    placeholder="Ï†ÑÌôîÎ≤àÌò∏ (Ïòà: 010-1234-5678)"
                    value={cvData.personalInfo.phone}
                    onChange={(e) => updatePersonalInfo('phone', e.target.value)}
                    className="form-input"
                  />
                </div>
                
                {/* ÏúÑÏπò ÏûÖÎ†• */}
                <div className="input-group">
                  <div className="location-input-container">
                    <input
                      type="text"
                      id="location"
                      value={cvData.personalInfo.location}
                      onChange={(e) => updatePersonalInfo('location', e.target.value)}
                      placeholder="Ïòà: ÏÑúÏö∏, ÌïúÍµ≠"
                      className="form-input"
                    />
                    <LocationDetector
                      onLocationDetected={(location) => updatePersonalInfo('location', location)}
                      className="location-detector-inline"
                    />
                  </div>
                </div>
                
                <div className="input-field">
                  <input
                    type="url"
                    placeholder="LinkedIn URL (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
                    value={cvData.personalInfo.linkedin}
                    onChange={(e) => updatePersonalInfo('linkedin', e.target.value)}
                    className="form-input"
                  />
                </div>
                
                <div className="input-field">
                  <input
                    type="url"
                    placeholder="GitHub URL (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
                    value={cvData.personalInfo.github}
                    onChange={(e) => updatePersonalInfo('github', e.target.value)}
                    className="form-input"
                  />
                </div>
              </div>
              <div className="mt-6">
                <GhostTextarea
                  value={cvData.personalInfo.summary}
                  onChange={(value) => updatePersonalInfo('summary', value)}
                  placeholder="ÏûêÍ∏∞ÏÜåÍ∞úÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                  rows={4}
                  context="personal"
                  field="summary"
                />
              </div>
            </div>
          </div>
        );

      case 'skills':
        return (
          <div className="card">
            <div className="card-body">
              <h2 className="card-title">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
                Ïä§ÌÇ¨
              </h2>
              
              {/* Ïä§ÌÇ¨ ÎìúÎ°≠Îã§Ïö¥ */}
              <div className="mb-4">
                <SkillDropdown onSkillSelect={handleSkillSelect} />
              </div>
              
              {/* Í∏∞Ï°¥ Ïä§ÌÇ¨ Î™©Î°ù */}
              <div className="tag-list">
                {cvData.skills.map((skill, index) => (
                  <span key={index} className="tag">
                    {skill}
                    <button
                      onClick={() => removeSkill(index)}
                      className="tag-remove"
                    >
                      √ó
                    </button>
                  </span>
                ))}
              </div>
              
              {/* Í∏∞Ï°¥ ÏûÖÎ†• Î∞©Ïãù (Î∞±ÏóÖÏö©) */}
              <div className="mt-4 pt-4 border-t border-slate-200">
                <div className="text-sm text-slate-600 mb-2">ÏßÅÏ†ë ÏûÖÎ†•:</div>
                <div className="tag-input">
                  <input
                    type="text"
                    placeholder="Ïä§ÌÇ¨ÏùÑ ÏûÖÎ†•ÌïòÍ≥† EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî"
                    value={skillsInput}
                    onChange={(e) => setSkillsInput(e.target.value)}
                    onKeyPress={(e) => handleKeyPress(e, handleAddSkill)}
                    className="form-input"
                  />
                  <button
                    onClick={handleAddSkill}
                    className="btn btn-success btn-md"
                  >
                    Ï∂îÍ∞Ä
                  </button>
                </div>
              </div>
            </div>
          </div>
        );

      case 'languages':
        return (
          <div className="card">
            <div className="card-body">
              <h2 className="card-title">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5h12M9 3v2m1.5 5H3m2 5h4m1-12l-3-3m0 0l-3 3m3-3v12" />
                </svg>
                Ïñ∏Ïñ¥
              </h2>
              
              <div className="tag-input">
                <input
                  type="text"
                  placeholder="Ïñ∏Ïñ¥Î•º ÏûÖÎ†•ÌïòÍ≥† EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî (Ïòà: ÌïúÍµ≠Ïñ¥, ÏòÅÏñ¥, ÏùºÎ≥∏Ïñ¥)"
                  value={languagesInput}
                  onChange={(e) => setLanguagesInput(e.target.value)}
                  onKeyPress={(e) => handleKeyPress(e, handleAddLanguage)}
                  className="form-input"
                />
                <button
                  onClick={handleAddLanguage}
                  className="btn btn-success btn-md"
                >
                  Ï∂îÍ∞Ä
                </button>
              </div>
              
              <div className="tag-list mt-4">
                {cvData.languages.map((language, index) => (
                  <span key={index} className="tag">
                    {language}
                    <button
                      onClick={() => removeLanguage(index)}
                      className="tag-remove"
                    >
                      √ó
                    </button>
                  </span>
                ))}
              </div>
            </div>
          </div>
        );

      case 'experience':
        return (
          <div className="card">
            <div className="card-body">
              <h2 className="card-title">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M9 16h.01M19 21a2 2 0 01-2 2H7a2 2 0 01-2-2V5a2 2 0 012-2h10a2 2 0 012 2v16z" />
                </svg>
                Í≤ΩÎ†•ÏÇ¨Ìï≠
              </h2>
              <SectionEditor type="experience" />
            </div>
          </div>
        );

      case 'education':
        return (
          <div className="card">
            <div className="card-body">
              <h2 className="card-title">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 14l9-5-9-5-9 5 9 5z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
                </svg>
                ÍµêÏú°ÏÇ¨Ìï≠
              </h2>
              <SectionEditor type="education" />
            </div>
          </div>
        );

      case 'projects':
        return (
          <div className="card">
            <div className="card-body">
              <h2 className="card-title">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                </svg>
                ÌîÑÎ°úÏ†ùÌä∏
              </h2>
              <SectionEditor type="project" />
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="minimal">
      {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
      <div className="main-content">
        <Header 
          progressPercentage={getProgressPercentage()}
          sections={sections}
          activeSection={activeSection}
          onSectionChange={(sectionId) => setActiveSection(sectionId as any)}
          stepStatus={getStepStatus()}
          onDownload={handleDownload}
          onReset={() => {
            if (confirm('Ï†ïÎßêÎ°ú Î™®Îì† CV Îç∞Ïù¥ÌÑ∞Î•º Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏúºÎ©∞, ÏûëÏÑ± Ï§ëÏù∏ Î™®Îì† ÎÇ¥Ïö©Ïù¥ ÏÇ¨ÎùºÏßëÎãàÎã§.')) {
              resetAfterCompletion();
              alert('CV Îç∞Ïù¥ÌÑ∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.\n\nÏÉàÎ°úÏö¥ CV ÏûëÏÑ±ÏùÑ ÏãúÏûëÌï† Ïàò ÏûàÏäµÎãàÎã§.');
            }
          }}
          onSaveDraft={() => {
            // ÏûÑÏãúÏ†ÄÏû• Í∏∞Îä• Íµ¨ÌòÑ
            localStorage.setItem('cvDraft', JSON.stringify(cvData));
            alert('ÏûÑÏãúÏ†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!');
          }}
          isDownloadReady={isDownloadReady()}
          isLoading={isLoading}
        />
        
        {/* ÏóêÎü¨ ÌëúÏãú */}
        {error && (
          <div className="error-banner">
            {error}
          </div>
        )}
        
        {/* CV ÌÖúÌîåÎ¶ø Î∞è Îã§Ïö¥Î°úÎìú ÌÜµÌï© ÏÑπÏÖò */}
        <div className="card">
          <div className="card-body">
            <div className="cv-controls-header">
              <h2 className="card-title">CV ÏÑ§Ï†ï</h2>
            </div>
            
            <div className="cv-controls-content">
              {/* CV ÌÖúÌîåÎ¶ø Ï†ïÎ≥¥ */}
              <div className="cv-template-section">
                <div className="template-info">
                  <h3 className="template-title">ÌòÑÏû¨ ÌÖúÌîåÎ¶ø</h3>
                  <div className="current-template-info">
                    <div className="template-badge">
                      <span className="template-type">
                        {cvData.type === 'chronological' && 'Ïó≠Ïàú Ïó∞ÎåÄÍ∏∞Ìòï'}
                        {cvData.type === 'functional' && 'Í∏∞Îä•Ìòï'}
                        {cvData.type === 'combination' && 'ÌòºÌï©Ìòï'}
                        {cvData.type === 'academic' && 'ÌïôÎ¨∏Ìòï'}
                        {cvData.type === 'creative' && 'ÌÅ¨Î¶¨ÏóêÏù¥Ìã∞Î∏å'}
                      </span>
                    </div>
                    <p className="template-description">
                      {cvData.type === 'chronological' && 'Í≤ΩÎ†• Ï§ëÏã¨Ïùò Ïó≠Ïàú Ïó∞ÎåÄÍ∏∞Ìòï Ïù¥Î†•ÏÑú'}
                      {cvData.type === 'functional' && 'Ïä§ÌÇ¨Í≥º Ïó≠Îüâ Ï§ëÏã¨Ïùò Í∏∞Îä•Ìòï Ïù¥Î†•ÏÑú'}
                      {cvData.type === 'combination' && 'Ïä§ÌÇ¨Í≥º Í≤ΩÎ†•ÏùÑ Ï°∞Ìï©Ìïú ÌòºÌï©Ìòï Ïù¥Î†•ÏÑú'}
                      {cvData.type === 'academic' && 'ÌïôÏà† Ïó∞Íµ¨ Ï§ëÏã¨Ïùò ÌïôÎ¨∏Ìòï Ïù¥Î†•ÏÑú'}
                      {cvData.type === 'creative' && 'Ï∞ΩÏùòÏ†Å ÎîîÏûêÏù∏ Ï§ëÏã¨Ïùò ÌÅ¨Î¶¨ÏóêÏù¥Ìã∞Î∏å Ïù¥Î†•ÏÑú'}
                    </p>
                  </div>
                </div>
                
                {/* ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù ÏòµÏÖòÎì§ */}
                <div className="template-options">
                  <h4 className="template-options-title">ÌÖúÌîåÎ¶ø Î≥ÄÍ≤Ω</h4>
                  <div className="template-grid">
                    {Object.entries(CV_TEMPLATES).map(([type, template]) => (
                      <button
                        key={type}
                        onClick={() => setCVType(type as any)}
                        className={`template-option ${cvData.type === type ? 'template-option-active' : ''}`}
                      >
                        <div className="template-option-header">
                          <h5 className="template-option-name">{template.name}</h5>
                          {template.isATSCompatible && (
                            <span className="template-ats-badge">ATS</span>
                          )}
                        </div>
                        <p className="template-option-desc">{template.description}</p>
                        <div className="template-option-tags">
                          {template.recommendedFor.map((tag, index) => (
                            <span key={index} className="template-tag">{tag}</span>
                          ))}
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
              
              {/* CV Îã§Ïö¥Î°úÎìú ÏÑπÏÖò Ï†úÍ±∞ - Ìó§ÎçîÎ°ú ÌÜµÌï©Îê® */}
            </div>
          </div>
        </div>
        
        {/* TemplateSelector Î™®Îã¨ Ï†úÍ±∞ - card-body ÏïàÏóê ÌÜµÌï©Îê® */}
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* ÏôºÏ™Ω: Ìé∏Ïßë ÏòÅÏó≠ (ÏÑπÏÖò ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò + Î≤àÏó≠Í∏∞ + Ìé∏Ïßë) */}
          <div className="lg:col-span-1">
            {/* ÏÑπÏÖò ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
            <div className="card">
              <div className="card-body">
                <h3 className="card-title">ÏÑπÏÖò ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò</h3>
                <div className="section-nav">
                  {sections.map((section) => (
                    <button
                      key={section.id}
                      onClick={() => setActiveSection(section.id as any)}
                      className={`section-nav-item ${activeSection === section.id ? 'active' : ''}`}
                    >
                      <span className="section-icon">{section.icon}</span>
                      <span className="section-label">{section.label}</span>
                      {getStepStatus()[section.id as keyof ReturnType<typeof getStepStatus>] && (
                        <span className="section-complete">‚úì</span>
                      )}
                    </button>
                  ))}
                </div>
              </div>
            </div>
            
            {/* Î≤àÏó≠Í∏∞ */}
            <div className="card mt-4">
              <div className="card-body">
                <h3 className="card-title">Î≤àÏó≠ ÎèÑÍµ¨</h3>
                <Translator />
              </div>
            </div>
            
            {/* ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏÑπÏÖò Ìé∏Ïßë */}
            <div className="card mt-4">
              <div className="card-body">
                {renderSection()}
              </div>
            </div>
          </div>
          
          {/* Ïò§Î•∏Ï™Ω: Ïã§ÏãúÍ∞Ñ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
          <div className="lg:col-span-1">
            <div className="preview-card">
              <h3 className="preview-title">Ïã§ÏãúÍ∞Ñ ÎØ∏Î¶¨Î≥¥Í∏∞</h3>
              <p className="preview-description">
                Ïò§Î•∏Ï™ΩÏóêÏÑú Ïã§ÏãúÍ∞ÑÏúºÎ°ú CVÎ•º ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§. A4 ÌÅ¨Í∏∞Î°ú ÏµúÏ†ÅÌôîÎêòÏñ¥ ÏûàÏñ¥ Ïù∏ÏáÑ ÏãúÏóêÎèÑ ÏôÑÎ≤ΩÌï©ÎãàÎã§.
              </p>
            </div>
            <Preview />
          </div>
        </div>
        
        {/* Footer */}
        <Footer />
      </div>
    </div>
  );
}
